[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Anvit Aggarwal",
    "section": "",
    "text": "Hello, I am Anvit Aggarwal! I am currently a Computer Science student at IIT Gandhinagar. I plan to use this website to share my work and write about my opinions."
  },
  {
    "objectID": "blog/posts/index.html",
    "href": "blog/posts/index.html",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "Hello and welcome to this blog! This blog is about the tikzplotlib library.\nMatplotlib is awesome! It is so easy to plot elegant graphs and figures using matplotlib. Wouldn’t it be great if matplotlib plots can be seamlessly integrated with LaTex. It would significantly improve the visual appeal and readability of the paper while also making it easier for the writer.\nNow, it is possible to do it by just uploading the image. However, there are certain issues: 1. If many such plots are to be created, lots of separate files have to be uploaded and managed. 2. An image is not modifiable. For modifying the image, a new image has to uploaded each time. 3. It also integrates easily with rest of the document. Placing images at the right spot is not always easy in LaTex. And, changing the format often disturbs the positioning of the image.\n\n\nAll these problems are solved by Tikzplotlib. It’s a library that converts matplotlib plots into pgfplots that can be used in LaTex.\nPgfplots is a LaTex package that can be used to generate scientific and technical graphics. It is based on the PGF/Tikz package developed by Till Tantau.\nWhat is PGF/Tikz? PGF/Tikz is a pair of programming languages for producing vector graphics from a geometric/algebraic description. We are not going to delve further into PGF/Tikz. We will talk about using Tikzplotlib.\nBy the way, you can also watch this video:\n\n\n\n\n!pip install tikzplotlib\nThat’s it. Tikzplotlib is installed now.\n\n\n\nimport tikzplotlib\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n&lt;ipython-input-3-f7494fee2594&gt; in &lt;cell line: 0&gt;()\n----&gt; 1 import tikzplotlib\n\n2 frames\n/usr/local/lib/python3.11/dist-packages/tikzplotlib/_axes.py in &lt;module&gt;\n      1 import matplotlib as mpl\n      2 import numpy as np\n----&gt; 3 from matplotlib.backends.backend_pgf import (\n      4     common_texification as mpl_common_texification,\n      5 )\n\nImportError: cannot import name 'common_texification' from 'matplotlib.backends.backend_pgf' (/usr/local/lib/python3.11/dist-packages/matplotlib/backends/backend_pgf.py)\n\n---------------------------------------------------------------------------\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n---------------------------------------------------------------------------\nAs you can notice here, an error is thrown when tikzplotlib is imported. This is because tikzplotlib is no longer maintained and is incompatible with the newer version of matplotlib. It calls a deprecated matplotlib function called common_texification. The solution to this is to degrade your matplotlib installation. We degraded it to 3.7 and it worked fine.\n!pip install matplotlib==3.7\nOn trying to run the sample code provided in the github repository of tikzplotlib, we ran into another error.\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use(\"ggplot\")\n\nt = np.arange(0.0, 2.0, 0.1)\ns = np.sin(2 * np.pi * t)\ns2 = np.cos(2 * np.pi * t)\nplt.plot(t, s, \"o-\", lw=4.1)\nplt.plot(t, s2, \"o-\", lw=4.1)\nplt.xlabel(\"time (s)\")\nplt.ylabel(\"Voltage (mV)\")\nplt.title(\"Simple plot $\\\\frac{\\\\alpha}{2}$\")\nplt.grid(True)\n\nimport tikzplotlib\n\ntikzplotlib.clean_figure()\ntikzplotlib.save(\"test.tex\")\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n&lt;ipython-input-2-cae1fa5303b0&gt; in &lt;cell line: 0&gt;()\n     17 \n     18 tikzplotlib.clean_figure()\n---&gt; 19 tikzplotlib.save(\"test.tex\")\n----------------------------------------------------------------------------\n\n/usr/local/lib/python3.11/dist-packages/tikzplotlib/_color.py in _get_closest_colour_name(rgb)\n     30     match = None\n     31     mindiff = 1.0e15\n---&gt; 32     for h, name in webcolors.CSS3_HEX_TO_NAMES.items():\n     33         r = int(h[1:3], 16)\n     34         g = int(h[3:5], 16)\n\nAttributeError: module 'webcolors' has no attribute 'CSS3_HEX_TO_NAMES'\nTikzplotlib uses a library named webcolors, the python library for HTML and CSS colour formats. Webcolors no longer has the attribute CSS3_HEX_TO_NAMES because of which this error is thrown. Just like matplotlib, webcolors also has to be degraded. We degraded it to version 1.12 and it worked fine. It can be done using:\n!pip install webcolors==1.12\nOn running the same code again, we get the plot:\n\n\n\nTikzplot generated plot\n\n\n\n\n\nLet’s take a look at the key features that tikzplotlib provides.\n\nget_tikz_code(): It produces the LaTex code for the plot in the form of a string.\n\nI tried to obtain the LaTex code for this graph that I had plotted for an Electrical Engineering assignment. \n# My code for producing matplotlib plot\nplt.plot(phase_diff_df['Frequency'], phase_diff_df['Phase Difference'])\nplt.axhline(y=2*np.pi, color='r', linestyle='--', label='2π Radians')\nplt.xticks(range(500, 10001, 500), rotation = 45)\nplt.yticks([1,2,3,4,5,6,np.pi * 2])\nplt.xlabel('Frequency(Hz)')\nplt.ylabel('Phase Difference (radians)')\nplt.title('Phase Response of Piezoelectric Transducer')\nplt.grid()\n# Replace plt.show() with tikzplotlib.get_tikz_code()\ntikzplotlib.get_tikz_code()\nTikzplotlib produced the following code along with the graph:\n% This file was created with tikzplotlib v0.10.1.\n\\begin{tikzpicture}\n\n\\definecolor{darkgray176}{RGB}{176,176,176}\n\\definecolor{steelblue31119180}{RGB}{31,119,180}\n\n\\begin{axis}[\ntick align=outside,\ntick pos=left,\ntitle={Phase Response of Piezoelectric Transducer},\nx grid style={darkgray176},\nxlabel={Frequency(Hz)},\nxmajorgrids,\nxmin=25, xmax=10475,\nxtick style={color=black},\nxticklabel style={rotate=45.0},\ny grid style={darkgray176},\nylabel={Phase Difference (radians)},\nymajorgrids,\nymin=-0.302692452173377, ymax=6.56388661077783,\nytick style={color=black},\nytick={1,2,3,4,5,6,6.28318530717959},\nyticklabels={1.000,2.000,3.000,4.000,5.000,6.000,6.283}\n]\n\\addplot [semithick, steelblue31119180]\ntable {%\n500 0.0376991118430783\n600 0.238761041672824\n700 0.232477856365646\n800 0.165580412800968\n900 0.238761041672825\n1000 0.326725635973339\n1100 0.263295384300859\n1200 0.205631519144059\n1300 0.280984046937071\n1400 0.395840674352314\n1500 0.394662577107217\n1600 0.60318578948924\n1700 1.34585829279787\n1800 1.33831847042925\n1900 1.4206281979533\n2000 1.84097329500362\n2100 1.90003523689111\n2200 1.74044233008875\n2300 2.11350645770253\n2400 2.53840686410055\n2500 2.89942821987558\n2600 3.0473448739821\n2700 3.07948578343806\n2800 3.14159265358979\n2900 3.22776205208826\n3000 3.41176962179851\n3300 3.52845734893185\n3700 3.86541560097688\n4100 4.1539708862091\n4300 4.71015495894214\n4500 4.90716772490726\n5000 4.60557483016264\n5400 5.16043721265302\n5800 4.34179528699395\n6200 4.96468303656529\n6600 5.65796003692055\n7000 6.25176938064369\n7300 0.305781684949406\n7700 0.719660337121081\n8000 0.659734457253857\n9000 0.00942477796076878\n10000 0.116687727133336\n};\n\\end{axis}\n\n\\end{tikzpicture}\n\n\n\nTikzplotlib-generated plot\n\n\n\nsave(): This does the same job as get_tikz_code() but saves the code in a tex file instead of printing it as a string. Notice that test.tex has been created in the files section. \nclean_figure(): It reduces the number of points to create a smoother and cleaner figure.\n\nI tried using this function on the Piezoelectric Transducer Graph. However, there was no noticeable change.\nI then used an example from the repository itself:\nfrom tikzplotlib import get_tikz_code, cleanfigure\n\nx = np.linspace(1, 100, 20)\ny = np.linspace(1, 100, 20)\n\nwith plt.rc_context(rc=RC_PARAMS):\n  fig, ax = plt.subplots(1, 1, figsize=(5, 5))\n  ax.plot(x, y)\n  ax.set_ylim([20, 80])\n  ax.set_xlim([20, 80])\n  raw = get_tikz_code()\n\n  clean_figure(fig)\n  clean = get_tikz_code()\n\n  # Use number of lines to test if it worked.\n  # the baseline (raw) should have 20 points\n  # the clean version (clean) should have 2 points\n  # the difference in line numbers should therefore be 2\nnumLinesRaw = raw.count(\"\\n\")\nnumLinesClean = clean.count(\"\\n\")\nprint(\"number of tikz lines saved\", numLinesRaw - numLinesClean)\nNote the comments made by the author. Raw must have 20 points. The clean version should have 2 points. It matches with the output obtained. However, the author also states that the difference in line numbers should therefore be 2. But, 20 - 2 = 18 and that’s the output that was obtained.\nHere’s the raw code:\n% This file was created with tikzplotlib v0.10.1.\n\\begin{tikzpicture}\n\n\\definecolor{darkgray176}{RGB}{176,176,176}\n\\definecolor{steelblue31119180}{RGB}{31,119,180}\n\n\\begin{axis}[\ntick align=outside,\ntick pos=left,\nx grid style={darkgray176},\nxmin=20, xmax=80,\nxtick style={color=black},\ny grid style={darkgray176},\nymin=20, ymax=80,\nytick style={color=black}\n]\n\\addplot [semithick, steelblue31119180]\ntable {%\n1 1\n6.21052631578947 6.21052631578947\n11.4210526315789 11.4210526315789\n16.6315789473684 16.6315789473684\n21.8421052631579 21.8421052631579\n27.0526315789474 27.0526315789474\n32.2631578947368 32.2631578947368\n37.4736842105263 37.4736842105263\n42.6842105263158 42.6842105263158\n47.8947368421053 47.8947368421053\n53.1052631578947 53.1052631578947\n58.3157894736842 58.3157894736842\n63.5263157894737 63.5263157894737\n68.7368421052632 68.7368421052632\n73.9473684210526 73.9473684210526\n79.1578947368421 79.1578947368421\n84.3684210526316 84.3684210526316\n89.5789473684211 89.5789473684211\n94.7894736842105 94.7894736842105\n100 100\n};\n\\end{axis}\n\n\\end{tikzpicture}\nAnd here’s the cleaned up version:\n% This file was created with tikzplotlib v0.10.1.\n\\begin{tikzpicture}\n\n\\definecolor{darkgray176}{RGB}{176,176,176}\n\\definecolor{steelblue31119180}{RGB}{31,119,180}\n\n\\begin{axis}[\ntick align=outside,\ntick pos=left,\nx grid style={darkgray176},\nxmin=20, xmax=80,\nxtick style={color=black},\ny grid style={darkgray176},\nymin=20, ymax=80,\nytick style={color=black}\n]\n\\addplot [semithick, steelblue31119180]\ntable {%\n16.6315784454346 16.6315784454346\n84.3684234619141 84.3684234619141\n};\n\\end{axis}\n\n\\end{tikzpicture}\n\n\n\nAlso make sure that the packages for PGFPlots and proper Unicode support and are included in the header of your document:\n\\usepackage[utf8]{inputenc}\n\\usepackage{pgfplots}\n\\DeclareUnicodeCharacter{2212}{−}\n\\usepgfplotslibrary{groupplots,dateplot}\n\\usetikzlibrary{patterns,shapes.arrows}\n\\pgfplotsset{compat=newest}\nJust paste the Tikz code produced by Tikzplotlib.\n\n\n\nView in Overleaf\n\n\n\n\n\n\nTikzplotlib is outdated. One has to degrade matplotlib and webcolors.\nThere are cases (such as plotting the dashed red-line in the example) where tikzplotlib does not work. Also, it does not work when plt.legend() is used.\nTikzplotlib does not work for 3-D plots.\nThe clean_figure function did not produce accurate results.\n\n\n\n\n\nTikZplotlib is a useful library that allows users to export Matplotlib figures as TikZ/PGF code, which can be directly included in LaTeX documents. This makes it easier to create publication-quality plots without needing to export figures as images (e.g., PNG, PDF) and manually inserting them.\nHowever, it is quite outdated which makes it inconvenient for users.\nSome advanced features in Matplotlib, such as 3D plots, legend, complex color maps, and certain transparency effects, are not well supported by TikZplotlib. These elements may not be converted accurately or may require significant manual tweaking in the generated TikZ code.\n\n\n\n\n\nhttps://github.com/nschloe/tikzplotlib\nhttps://tikzplotlib.readthedocs.io/index.html"
  },
  {
    "objectID": "blog/posts/index.html#what-is-tikzplotlib",
    "href": "blog/posts/index.html#what-is-tikzplotlib",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "All these problems are solved by Tikzplotlib. It’s a library that converts matplotlib plots into pgfplots that can be used in LaTex.\nPgfplots is a LaTex package that can be used to generate scientific and technical graphics. It is based on the PGF/Tikz package developed by Till Tantau.\nWhat is PGF/Tikz? PGF/Tikz is a pair of programming languages for producing vector graphics from a geometric/algebraic description. We are not going to delve further into PGF/Tikz. We will talk about using Tikzplotlib.\nBy the way, you can also watch this video:"
  },
  {
    "objectID": "blog/posts/index.html#installation",
    "href": "blog/posts/index.html#installation",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "!pip install tikzplotlib\nThat’s it. Tikzplotlib is installed now."
  },
  {
    "objectID": "blog/posts/index.html#running-tikzplotlib",
    "href": "blog/posts/index.html#running-tikzplotlib",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "import tikzplotlib\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n&lt;ipython-input-3-f7494fee2594&gt; in &lt;cell line: 0&gt;()\n----&gt; 1 import tikzplotlib\n\n2 frames\n/usr/local/lib/python3.11/dist-packages/tikzplotlib/_axes.py in &lt;module&gt;\n      1 import matplotlib as mpl\n      2 import numpy as np\n----&gt; 3 from matplotlib.backends.backend_pgf import (\n      4     common_texification as mpl_common_texification,\n      5 )\n\nImportError: cannot import name 'common_texification' from 'matplotlib.backends.backend_pgf' (/usr/local/lib/python3.11/dist-packages/matplotlib/backends/backend_pgf.py)\n\n---------------------------------------------------------------------------\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n---------------------------------------------------------------------------\nAs you can notice here, an error is thrown when tikzplotlib is imported. This is because tikzplotlib is no longer maintained and is incompatible with the newer version of matplotlib. It calls a deprecated matplotlib function called common_texification. The solution to this is to degrade your matplotlib installation. We degraded it to 3.7 and it worked fine.\n!pip install matplotlib==3.7\nOn trying to run the sample code provided in the github repository of tikzplotlib, we ran into another error.\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use(\"ggplot\")\n\nt = np.arange(0.0, 2.0, 0.1)\ns = np.sin(2 * np.pi * t)\ns2 = np.cos(2 * np.pi * t)\nplt.plot(t, s, \"o-\", lw=4.1)\nplt.plot(t, s2, \"o-\", lw=4.1)\nplt.xlabel(\"time (s)\")\nplt.ylabel(\"Voltage (mV)\")\nplt.title(\"Simple plot $\\\\frac{\\\\alpha}{2}$\")\nplt.grid(True)\n\nimport tikzplotlib\n\ntikzplotlib.clean_figure()\ntikzplotlib.save(\"test.tex\")\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n&lt;ipython-input-2-cae1fa5303b0&gt; in &lt;cell line: 0&gt;()\n     17 \n     18 tikzplotlib.clean_figure()\n---&gt; 19 tikzplotlib.save(\"test.tex\")\n----------------------------------------------------------------------------\n\n/usr/local/lib/python3.11/dist-packages/tikzplotlib/_color.py in _get_closest_colour_name(rgb)\n     30     match = None\n     31     mindiff = 1.0e15\n---&gt; 32     for h, name in webcolors.CSS3_HEX_TO_NAMES.items():\n     33         r = int(h[1:3], 16)\n     34         g = int(h[3:5], 16)\n\nAttributeError: module 'webcolors' has no attribute 'CSS3_HEX_TO_NAMES'\nTikzplotlib uses a library named webcolors, the python library for HTML and CSS colour formats. Webcolors no longer has the attribute CSS3_HEX_TO_NAMES because of which this error is thrown. Just like matplotlib, webcolors also has to be degraded. We degraded it to version 1.12 and it worked fine. It can be done using:\n!pip install webcolors==1.12\nOn running the same code again, we get the plot:\n\n\n\nTikzplot generated plot"
  },
  {
    "objectID": "blog/posts/index.html#key-features",
    "href": "blog/posts/index.html#key-features",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "Let’s take a look at the key features that tikzplotlib provides.\n\nget_tikz_code(): It produces the LaTex code for the plot in the form of a string.\n\nI tried to obtain the LaTex code for this graph that I had plotted for an Electrical Engineering assignment. \n# My code for producing matplotlib plot\nplt.plot(phase_diff_df['Frequency'], phase_diff_df['Phase Difference'])\nplt.axhline(y=2*np.pi, color='r', linestyle='--', label='2π Radians')\nplt.xticks(range(500, 10001, 500), rotation = 45)\nplt.yticks([1,2,3,4,5,6,np.pi * 2])\nplt.xlabel('Frequency(Hz)')\nplt.ylabel('Phase Difference (radians)')\nplt.title('Phase Response of Piezoelectric Transducer')\nplt.grid()\n# Replace plt.show() with tikzplotlib.get_tikz_code()\ntikzplotlib.get_tikz_code()\nTikzplotlib produced the following code along with the graph:\n% This file was created with tikzplotlib v0.10.1.\n\\begin{tikzpicture}\n\n\\definecolor{darkgray176}{RGB}{176,176,176}\n\\definecolor{steelblue31119180}{RGB}{31,119,180}\n\n\\begin{axis}[\ntick align=outside,\ntick pos=left,\ntitle={Phase Response of Piezoelectric Transducer},\nx grid style={darkgray176},\nxlabel={Frequency(Hz)},\nxmajorgrids,\nxmin=25, xmax=10475,\nxtick style={color=black},\nxticklabel style={rotate=45.0},\ny grid style={darkgray176},\nylabel={Phase Difference (radians)},\nymajorgrids,\nymin=-0.302692452173377, ymax=6.56388661077783,\nytick style={color=black},\nytick={1,2,3,4,5,6,6.28318530717959},\nyticklabels={1.000,2.000,3.000,4.000,5.000,6.000,6.283}\n]\n\\addplot [semithick, steelblue31119180]\ntable {%\n500 0.0376991118430783\n600 0.238761041672824\n700 0.232477856365646\n800 0.165580412800968\n900 0.238761041672825\n1000 0.326725635973339\n1100 0.263295384300859\n1200 0.205631519144059\n1300 0.280984046937071\n1400 0.395840674352314\n1500 0.394662577107217\n1600 0.60318578948924\n1700 1.34585829279787\n1800 1.33831847042925\n1900 1.4206281979533\n2000 1.84097329500362\n2100 1.90003523689111\n2200 1.74044233008875\n2300 2.11350645770253\n2400 2.53840686410055\n2500 2.89942821987558\n2600 3.0473448739821\n2700 3.07948578343806\n2800 3.14159265358979\n2900 3.22776205208826\n3000 3.41176962179851\n3300 3.52845734893185\n3700 3.86541560097688\n4100 4.1539708862091\n4300 4.71015495894214\n4500 4.90716772490726\n5000 4.60557483016264\n5400 5.16043721265302\n5800 4.34179528699395\n6200 4.96468303656529\n6600 5.65796003692055\n7000 6.25176938064369\n7300 0.305781684949406\n7700 0.719660337121081\n8000 0.659734457253857\n9000 0.00942477796076878\n10000 0.116687727133336\n};\n\\end{axis}\n\n\\end{tikzpicture}\n\n\n\nTikzplotlib-generated plot\n\n\n\nsave(): This does the same job as get_tikz_code() but saves the code in a tex file instead of printing it as a string. Notice that test.tex has been created in the files section. \nclean_figure(): It reduces the number of points to create a smoother and cleaner figure.\n\nI tried using this function on the Piezoelectric Transducer Graph. However, there was no noticeable change.\nI then used an example from the repository itself:\nfrom tikzplotlib import get_tikz_code, cleanfigure\n\nx = np.linspace(1, 100, 20)\ny = np.linspace(1, 100, 20)\n\nwith plt.rc_context(rc=RC_PARAMS):\n  fig, ax = plt.subplots(1, 1, figsize=(5, 5))\n  ax.plot(x, y)\n  ax.set_ylim([20, 80])\n  ax.set_xlim([20, 80])\n  raw = get_tikz_code()\n\n  clean_figure(fig)\n  clean = get_tikz_code()\n\n  # Use number of lines to test if it worked.\n  # the baseline (raw) should have 20 points\n  # the clean version (clean) should have 2 points\n  # the difference in line numbers should therefore be 2\nnumLinesRaw = raw.count(\"\\n\")\nnumLinesClean = clean.count(\"\\n\")\nprint(\"number of tikz lines saved\", numLinesRaw - numLinesClean)\nNote the comments made by the author. Raw must have 20 points. The clean version should have 2 points. It matches with the output obtained. However, the author also states that the difference in line numbers should therefore be 2. But, 20 - 2 = 18 and that’s the output that was obtained.\nHere’s the raw code:\n% This file was created with tikzplotlib v0.10.1.\n\\begin{tikzpicture}\n\n\\definecolor{darkgray176}{RGB}{176,176,176}\n\\definecolor{steelblue31119180}{RGB}{31,119,180}\n\n\\begin{axis}[\ntick align=outside,\ntick pos=left,\nx grid style={darkgray176},\nxmin=20, xmax=80,\nxtick style={color=black},\ny grid style={darkgray176},\nymin=20, ymax=80,\nytick style={color=black}\n]\n\\addplot [semithick, steelblue31119180]\ntable {%\n1 1\n6.21052631578947 6.21052631578947\n11.4210526315789 11.4210526315789\n16.6315789473684 16.6315789473684\n21.8421052631579 21.8421052631579\n27.0526315789474 27.0526315789474\n32.2631578947368 32.2631578947368\n37.4736842105263 37.4736842105263\n42.6842105263158 42.6842105263158\n47.8947368421053 47.8947368421053\n53.1052631578947 53.1052631578947\n58.3157894736842 58.3157894736842\n63.5263157894737 63.5263157894737\n68.7368421052632 68.7368421052632\n73.9473684210526 73.9473684210526\n79.1578947368421 79.1578947368421\n84.3684210526316 84.3684210526316\n89.5789473684211 89.5789473684211\n94.7894736842105 94.7894736842105\n100 100\n};\n\\end{axis}\n\n\\end{tikzpicture}\nAnd here’s the cleaned up version:\n% This file was created with tikzplotlib v0.10.1.\n\\begin{tikzpicture}\n\n\\definecolor{darkgray176}{RGB}{176,176,176}\n\\definecolor{steelblue31119180}{RGB}{31,119,180}\n\n\\begin{axis}[\ntick align=outside,\ntick pos=left,\nx grid style={darkgray176},\nxmin=20, xmax=80,\nxtick style={color=black},\ny grid style={darkgray176},\nymin=20, ymax=80,\nytick style={color=black}\n]\n\\addplot [semithick, steelblue31119180]\ntable {%\n16.6315784454346 16.6315784454346\n84.3684234619141 84.3684234619141\n};\n\\end{axis}\n\n\\end{tikzpicture}"
  },
  {
    "objectID": "blog/posts/index.html#integrating-with-latex",
    "href": "blog/posts/index.html#integrating-with-latex",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "Also make sure that the packages for PGFPlots and proper Unicode support and are included in the header of your document:\n\\usepackage[utf8]{inputenc}\n\\usepackage{pgfplots}\n\\DeclareUnicodeCharacter{2212}{−}\n\\usepgfplotslibrary{groupplots,dateplot}\n\\usetikzlibrary{patterns,shapes.arrows}\n\\pgfplotsset{compat=newest}\nJust paste the Tikz code produced by Tikzplotlib.\n\n\n\nView in Overleaf"
  },
  {
    "objectID": "blog/posts/index.html#limitations",
    "href": "blog/posts/index.html#limitations",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "Tikzplotlib is outdated. One has to degrade matplotlib and webcolors.\nThere are cases (such as plotting the dashed red-line in the example) where tikzplotlib does not work. Also, it does not work when plt.legend() is used.\nTikzplotlib does not work for 3-D plots.\nThe clean_figure function did not produce accurate results."
  },
  {
    "objectID": "blog/posts/index.html#conclusion",
    "href": "blog/posts/index.html#conclusion",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "TikZplotlib is a useful library that allows users to export Matplotlib figures as TikZ/PGF code, which can be directly included in LaTeX documents. This makes it easier to create publication-quality plots without needing to export figures as images (e.g., PNG, PDF) and manually inserting them.\nHowever, it is quite outdated which makes it inconvenient for users.\nSome advanced features in Matplotlib, such as 3D plots, legend, complex color maps, and certain transparency effects, are not well supported by TikZplotlib. These elements may not be converted accurately or may require significant manual tweaking in the generated TikZ code."
  },
  {
    "objectID": "blog/posts/index.html#references",
    "href": "blog/posts/index.html#references",
    "title": "ES114 Exposition Assignment Blog",
    "section": "",
    "text": "https://github.com/nschloe/tikzplotlib\nhttps://tikzplotlib.readthedocs.io/index.html"
  },
  {
    "objectID": "quotes/quotes.html",
    "href": "quotes/quotes.html",
    "title": "Quotes",
    "section": "",
    "text": "“Syntactic sugar causes cancer of the semicolon.”\n— Alan Perlis\n\n\n“If you’re interested, you’re not astray.” — Paul Graham\n\n\n“Programmers are not to be measured by their Ingenuity but by the completeness of their case analysis.” — Alan Perlis\n\n\n“To get what you want, you have to deserve what you want. The world is not yet a crazy enough place to reward a whole bunch of undeserving people.” — Charlie Munger\n\n\n“When the measure becomes the target, it ceases to be a good measure.” — Charles Goodhart\n\n\n“Jab bhi time par hona ho, toh jaldi mein mat rehna. Kyunki jo bhi late hota hai woh hamesha jaldi mein raha hai.” — Kunal Kamra\n\n\n“It doesn’t matter how fast you move if it’s in a worthless direction. Picking the right thing to work on is the most important element of productivity and usually almost ignored. So think about it more!” — Sam Altman\n\n\n“It’s not who I am underneath, but what I do that defines me.” — Batman (in Batman Begins)\n\n\n“Play positive games not zero-sum games. Wealth is a very positive sum game. Status is a zero-sum game.” — Naval Ravikant\n\n\n“Get into a rut early: Do the same process the same way. Accumulate idioms. Standardize. The only difference(!) between Shakespeare and you was the size of his idiom list - not the size of his vocabulary.” — Alan Perlis\n\n\n“I realized recently that what one thinks about in the shower in the morning is more important than I’d thought. I knew it was a good time to have ideas. Now I’d go further: now I’d say it’s hard to do a really good job on anything you don’t think about in the shower.” — Paul Graham\n\n\n“Never backtrack more than you need to.” — Paul Graham\n\n\n‘There’s a subtle reason that programmers always want to throw away the code and start over. The reason is that they think the old code is a mess. And here is the interesting observation: they are probably wrong. The reason that they think the old code is a mess is because of a cardinal, fundamental law of programming: “It’s harder to read code than to write it.”’ — Joel Spolsky\n\n\n“Two things are infinite: the universe and human stupidity; and I’m not sure about the universe.” — Albert Einstein\n\n\n“It’s a basic truth of the human condition that everybody lies. The only variable is about what.” — Dr. Gregory House (from House M.D.)\n\n\n“Occam’s Razor. The simplest explanation is almost always somebody screwed up.” — Dr. Gregory House (from House M.D.)\n\n\n“The eyes can mislead, the smile can lie, but the shoes always tell the truth.” — Dr. Gregory House (from House M.D.)\n\n\n“Right and wrong do exist. Just because you don’t know what the right answer is — maybe there’s even no way you could know what the right answer is — doesn’t make your answer right or even okay. It’s much simpler than that. It’s just plain wrong.” — Dr. Gregory House (from House M.D.)\n\n\n“And humility is an important quality. Especially if you’re wrong a lot…. Of course, when you’re right, self-doubt doesn’t help anybody, does it?” [#109] — Dr. Gregory House (from House M.D.)\n\n\n“There’s nothing in this universe that can’t be explained. Eventually.” — Dr. Gregory House (from House M.D.)\n\n\n“When you have eliminated the impossible, whatever remains, however improbable, must be the truth?” — Sherlock Holmes\n\n\n“The story so far: In the beginning the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move.” — Douglas Adams, The Restaurant at the End of the Universe\n\n\n“Violence is the last refuge of the incompetent.” — Salvador Hardin (in Foundation by Isaac Asimov)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "ES114 Exposition Assignment Blog\n\n\n\n\n\n\nPython\n\n\nLatex\n\n\n\n\n\n\n\n\n\nFeb 25, 2025\n\n\nAarav Trivedi, Ajinkya Sadavarte and Anvit Aggarwal\n\n\n\n\n\n\nNo matching items"
  }
]